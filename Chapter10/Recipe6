import boto3

client = boto3.client(
    "quicksight",
)
principal = ‘arn:aws:quicksight:<aws-region>:<account-id>:user/<namespace-name>/<quicksight-user-name>’
data_source_permissions = [  
    "quicksight:DescribeDataSource",
    "quicksight:DescribeDataSourcePermissions",
    "quicksight:PassDataSource",
    "quicksight:UpdateDataSource",
    "quicksight:DeleteDataSource",
    "quicksight:UpdateDataSourcePermissions",
]

data_set_permissions = [
    "quicksight:DescribeDataSet",
    "quicksight:DescribeDataSetPermissions",
    "quicksight:PassDataSet",
    "quicksight:DescribeIngestion",
    "quicksight:ListIngestions",
    "quicksight:UpdateDataSet",
    "quicksight:DeleteDataSet",
    "quicksight:CreateIngestion",
    "quicksight:CancelIngestion",
    "quicksight:UpdateDataSetPermissions",
]

analysis_permissions = [
    "quicksight:RestoreAnalysis",
    "quicksight:UpdateAnalysisPermissions",
    "quicksight:DeleteAnalysis",
    "quicksight:QueryAnalysis",
    "quicksight:DescribeAnalysisPermissions",
    "quicksight:DescribeAnalysis",
    "quicksight:UpdateAnalysis",    
]

dashboard_permissions = [
    "quicksight:DescribeDashboard",
    "quicksight:QueryDashboard",
    "quicksight:ListDashboardVersions",
    "quicksight:UpdateDashboardPermissions",
    "quicksight:UpdateDashboard",
    "quicksight:DeleteDashboard",
    "quicksight:UpdateDashboardPublishedVersion",
    "quicksight:DescribeDashboardPermissions",    
]

theme_permissions = [
    "quicksight:DescribeTheme",
    "quicksight:DescribeThemeAlias",
    "quicksight:ListThemeAliases",
    "quicksight:ListThemeVersions",
    "quicksight:DeleteTheme",
    "quicksight:UpdateTheme",
    "quicksight:CreateThemeAlias",
    "quicksight:DeleteThemeAlias",
    "quicksight:UpdateThemeAlias",
    "quicksight:UpdateThemePermissions",
    "quicksight:DescribeThemePermissions",    
]
for data_source in client.list_data_sources(AwsAccountId=""<AWS_ACCOUNT_ID>"")["DataSources"]:
    # print(data_source)
    client.update_data_source_permissions(
        AwsAccountId=""<AWS_ACCOUNT_ID>"",
        DataSourceId=data_source["DataSourceId"],
        GrantPermissions=[{"Principal": principal, "Actions": data_source_permissions},],
    )

for data_set in client.list_data_sets(AwsAccountId=""<AWS_ACCOUNT_ID>"")["DataSetSummaries"]:
    # print(data_set)
    client.update_data_set_permissions(
        AwsAccountId=""<AWS_ACCOUNT_ID>"",
        DataSetId=data_set["DataSetId"],
        GrantPermissions=[{"Principal": principal, "Actions": data_set_permissions},],
    )

for analysis in client.list_analyses(AwsAccountId='"<AWS_ACCOUNT_ID>"')['AnalysisSummaryList']:
    # print(analysis)
    if analysis['Status'] != 'DELETED':
        client.update_analysis_permissions(
            AwsAccountId=""<AWS_ACCOUNT_ID>"",
            AnalysisId=analysis["AnalysisId"],
            GrantPermissions=[{"Principal": principal, "Actions": analysis_permissions},],
        )

for dashboard in client.list_dashboards(AwsAccountId=""<AWS_ACCOUNT_ID>"")[
    "DashboardSummaryList"
]:
    # print(dashboard)
    client.update_dashboard_permissions(
        AwsAccountId=""<AWS_ACCOUNT_ID>"",
        DashboardId=dashboard["DashboardId"],
        GrantPermissions=[{"Principal": principal, "Actions": dashboard_permissions},],
    )

for theme in client.list_themes(AwsAccountId=""<AWS_ACCOUNT_ID>"")["ThemeSummaryList"]:
    if theme['Name'] == 'spenny dark':
        print(theme)
        client.update_theme_permissions(
            AwsAccountId=""<AWS_ACCOUNT_ID>"",
            ThemeId=theme["ThemeId"],
            GrantPermissions=[{"Principal": principal, "Actions": theme_permissions},],
        )


